1.mybatis spring事务底层原理
前提知识
启动加载，springboot通过api启动加载配置文件的时候会有事务相关配置类被加载到容器中，TransactionAutoConfiguration
加载这个类的时候会把事务相关的配置都加载到容器中去，其中包括TransactionOperator TransactionTemplate，最重要的是TransactionInterceptor
在执行方法的时候通过代理执行DynamicAdviseInterceptor 的intercept, 最后会执行到advised 即 TransactionInterceptor的invoke方法

1.事务是通过aop实现的，现有ioc再有aop，aop其实就是ioc整个流程中的一个扩展点，BeanPostProcessor
2.代理对象可以通过jdk或者cglib来实现
3.事务的方法会执行DynamicAdviseInterceptor的intercept方法，这个里面会执行TransactionInterceptor的invoke

事务为什么是通过代理实现的，具体细节？
后置处理器BeanPostProcessor的实现类 最后调用AopProxy判断是用那种代理来实现，在调用前会先判断是否有advise，如果有通知则创建代理对象来代替真实对象
如果没有advise，就返回当前对象即可。方法 org.springframework.aop.framework.autoproxy.AbstractAutoProxyCreator.getAdvicesAndAdvisorsForBean
如何判断是否需要代理？
看是否要advise，如果有则会创建代理对象    mainServiceImpl
****************************************************************************************************************************************************************

2.spring中bean的加载流程
对于之前我们需要一个对象就直接new一个接可以了，但是对象的生成和销毁都有产生一定的开销，还存在多次生成对象
spring用ioc来实现将所有的bean加载到容器中去，需要的时候我们注入就可以了，bean的加载从
AbstractApplicationContext 的refresh方法的 finishBeanFactoryInitialization
getBean
doGetBean
    getSingleton  函数式接口会调用下面的createBean
    creatBean
    doCreateBean
    createBeanInstance  根据类型选择具体的构造方法反射创建对象
    populateBean 对bean依赖的实例化
    initializeBean
        beanNameAware beanClassloaderAware beanFactoryAware 执行各种aware
        postProcessorBeforeInitialization
        initMethod
        postProcessAfterInitialization
DisposableBean 的destroy方法

org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBean(java.lang.String, org.springframework.beans.factory.support.RootBeanDefinition, java.lang.Object[])
org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.doCreateBean
循环依赖？
bean构造器的选择？
****************************************************************************************************************************************************************

3.spring的ioc的底层实现
ioc 是控制反转 ，由你控制生成对象改为spring控制生成对象
记住关键方法 createBeanFactory getBean doGetBean createBean doCreateBean
1.先通过AbstractApplicationContext的refresh 方法创建bean工厂 即DefaultLisableBeanFactory
2.从beanFactory中获取对象，getBean doGetBean，如果没有bean则会创建bean
3.getBeanInstance 中调用createBean doCreateBean  createBeanInstance 使用无参的构造方法进行实例化对象
4.popularBean 填充属性
5.填充完属性后会调用bean的初始化方法 如果有的话 aware方法 postprocessorBeforeBeanInitialization  init方法 postProcessorAfterInitialization
代理对象就是在后置处理器中生成的

****************************************************************************************************************************************************************
4.spring和mybatis整合
接口是不能注入的，mapper都是接口，使用了代理模式，在refresh方法中invokeBeanFactoryProcessors 中会找到所有的BeanDe
ScannerMapper解析的类他实现了这个接口，
前提知识
@ScannerMapper