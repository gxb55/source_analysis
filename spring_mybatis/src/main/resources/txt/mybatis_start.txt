mybatis的Dao扫描
1.org.mybatis.spring.annotation.MapperScannerRegistrar.registerBeanDefinitions
 实现了ImportBeanDefinitionRegistrar接口，在注册bean的会扫描到
2.org.mybatis.spring.mapper.ClassPathMapperScanner.doScan
 这个类中先调用父类ClassPathBeanDefinitionScanner这个进行bean的扫描，扫描到了根据@MapperScan中配置的相关信息
 扫描到了两个dao拿到两个dao的BeanDefinition
3.org.mybatis.spring.mapper.ClassPathMapperScanner.processBeanDefinitions
这个方法中拿到了上面父类扫描到的beanDefinition，然后自己进行再次处理，处理成factoryBean 把class替换成MapperFactoryBean
4.在dao的实例化过程中，会根据类型去创建bean，发现dao是一个工厂bean会执行工厂的getObject方法即MapperFactoryBean的getObject方法
来实例化对应的dao
5.org.apache.ibatis.binding.MapperRegistry.getMapper
这里会拿到对应bean，其实就是MapperFactoryBean类型，通过反射和代理创建对象
这解释了为什么dao是个接口可以被注入到类里面去

这样整个mybatis跟spring的整合和dao的加载完成了

mybatis核心的内容

mapper执行方法都会走到这里因为创建代理对象时候
org.apache.ibatis.binding.MapperProxy.invoke
