package com.trip.algorithm.leet.some.leet2312;

import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;

public class Solution2744 {
    public static void main(String[] args) {
        Solution2744 solution2744 = new Solution2744();
        /*int[][] roads = {{3, 1}, {3, 2}, {1, 0}, {0, 4}, {0, 5}, {4, 6}};
        int seats = 2;*/
       /* int[][] roads = {};
        int seats = 1; */

        /*int[][] roads = {{1, 0}, {0, 2}, {3, 1}, {1, 4}, {5, 0}};
        int seats = 1;*/

        /*int[][] roads = {{0, 1}, {0, 2}, {0, 3}};
        int seats = 5;*/

        int[][] roads = {{1, 0}, {2, 1}, {3, 2}, {3, 4}, {4, 5}, {0, 6},
                {1, 7}, {8, 6}, {9, 3}, {10, 3}, {3, 11}, {4, 12}, {13, 5},
                {10, 14}, {1, 15}, {16, 3}, {17, 10}, {18, 5}, {14, 19},
                {9, 20}, {21, 11}, {9, 22}, {21, 23}, {24, 2}, {25, 21},
                {0, 26}, {14, 27}, {12, 28}, {20, 29}, {30, 28}, {9, 31},
                {26, 32}, {33, 21}, {34, 22}, {35, 9}, {34, 36}, {37, 22},
                {24, 38}, {39, 14}, {40, 16}, {0, 41}, {3, 42}, {19, 43},
                {37, 44}, {5, 45}, {46, 38}, {47, 9}, {48, 33}, {49, 10},
                {38, 50}, {27, 51}, {52, 31}, {12, 53}, {54, 34}, {55, 33},
                {56, 26}, {57, 53}, {58, 33}, {32, 59}, {6, 60}, {6, 61}, {62, 43}, {63, 14},
                {64, 27}, {62, 65}, {66, 31}, {50, 67}, {49, 68}, {5, 69}, {31, 70}, {71, 63},
                {72, 12}, {33, 73}, {45, 74}, {75, 53}, {76, 71}, {27, 77}, {18, 78}, {47, 79},
                {80, 8}, {10, 81}, {71, 82}, {30, 83}, {7, 84}, {85, 15}, {86, 84}, {86, 87}, {88, 47}
                , {23, 89}, {90, 40}, {5, 91}, {92, 85}, {48, 93}, {33, 94}, {95, 80}, {96, 68}, {90, 97},
                {98, 62}, {99, 87}, {100, 72}, {101, 61}, {102, 59}, {103, 5}, {104, 89}, {95, 105}, {82, 106}, {104, 107}, {108, 39}, {109, 98}, {11, 110}, {104, 111}, {82, 112}, {113, 95}, {15, 114}, {15, 115}, {19, 116}, {117, 10}, {118, 28}, {119, 50}, {120, 112}, {121, 40}, {26, 122}, {123, 9}, {87, 124}, {77, 125}, {126, 62}, {127, 97}, {128, 121}, {15, 129}, {18, 130}, {55, 131}, {29, 132}, {40, 133}, {134, 49}, {135, 65}, {136, 19}, {137, 106}, {11, 138}, {60, 139}, {140, 98}, {54, 141}, {142, 126}, {143, 46}, {34, 144}, {145, 138}, {146, 54}, {147, 120}, {148, 59}, {149, 28}, {150, 138}, {28, 151}, {37, 152}, {153, 38}, {116, 154}, {38, 155}, {43, 156}, {157, 10}, {158, 100}, {68, 159}, {160, 85}, {161, 156}, {162, 156}, {20, 163}, {164, 147}, {165, 26}, {166, 111}, {167, 21}, {145, 168}, {59, 169}, {170, 18}, {171, 111}, {112, 172}, {173, 16}, {147, 174}, {128, 175}, {176, 21}, {177, 117}, {178, 158}, {63, 179}, {180, 52}, {162, 181}, {145, 182}, {146, 183}, {184, 70}, {185, 114}, {3, 186}, {187, 134}, {113, 188}, {189, 58}, {160, 190}, {191, 71}, {76, 192}, {41, 193}, {194, 7}, {20, 195}, {196, 134}, {197, 119}, {198, 174}, {92, 199}, {13, 200}, {201, 123}, {202, 149}, {203, 41}, {204, 175}, {34, 205}, {206, 198}, {207, 130}, {159, 208}, {21, 209}, {51, 210}, {80, 211}, {149, 212}, {213, 124}, {214, 82}, {113, 215}, {216, 24}, {217, 133}, {218, 100}, {219, 5}, {148, 220}, {40, 221}, {222, 205}, {223, 115}, {17, 224}, {225, 138}, {85, 226}, {44, 227}, {228, 138}, {100, 229}, {42, 230}, {125, 231}, {52, 232}, {24, 233}, {234, 143}, {235, 175}, {22, 236}, {114, 237}, {238, 186}, {239, 219}, {240, 107}, {136, 241}, {242, 87}, {243, 133}, {244, 218}, {155, 245}, {246, 237}, {247, 68}, {51, 248}, {249, 169}, {250, 163}, {251, 99}, {163, 252}, {61, 253}, {201, 254}, {59, 255}, {189, 256}, {257, 118}, {258, 53}, {132, 259}, {260, 46}, {223, 261}, {235, 262}, {47, 263}, {120, 264}, {109, 265}, {84, 266}, {267, 109}, {238, 268}, {235, 269}, {270, 224}, {133, 271}, {272, 179}, {15, 273}, {152, 274}, {275, 174}, {276, 225}, {17, 277}, {278, 227}, {279, 11}, {280, 199}, {281, 107}, {166, 282}, {283, 174}, {284, 171}, {285, 152}, {243, 286}, {261, 287}, {180, 288}, {159, 289}, {290, 235}, {291, 283}, {85, 292}, {116, 293}, {115, 294}, {123, 295}, {296, 288}, {297, 187}, {298, 282}, {299, 8}, {119, 300}, {301, 168}, {302, 267}, {303, 83}, {304, 60}, {305, 285}, {306, 60}, {106, 307}, {308, 88}, {163, 309}, {4, 310}, {311, 225}, {63, 312}, {80, 313}, {314, 236}, {315, 28}, {27, 316}, {317, 206}, {6, 318}, {59, 319}, {198, 320}, {301, 321}, {322, 319}, {134, 323}, {324, 210}, {325, 22}, {309, 326}, {20, 327}, {265, 328}, {148, 329}, {322, 330}, {331, 78}, {332, 65}, {293, 333}, {306, 334}, {46, 335}, {26, 336}, {53, 337}, {42, 338}, {339, 270}, {340, 281}, {341, 290}, {134, 342}, {90, 343}, {344, 80}, {345, 133}, {56, 346}, {171, 347}, {348, 172}, {349, 276}, {350, 48}, {351, 109}, {352, 63}, {199, 353}, {354, 66}, {170, 355}, {182, 356}, {43, 357}, {181, 358}, {359, 115}, {360, 74}, {237, 361}, {166, 362}, {363, 200}, {364, 250}, {365, 138}, {366, 20}, {82, 367}, {97, 368}, {351, 369}, {370, 239}, {371, 307}, {213, 372}, {373, 132}, {374, 16}, {17, 375}, {376, 340}, {377, 213}, {23, 378}, {279, 379}, {291, 380}, {132, 381}, {280, 382}, {332, 383}, {358, 384}, {331, 385}, {386, 187}, {229, 387}, {388, 337}, {357, 389}, {390, 264}, {391, 275}, {127, 392}, {296, 393}, {394, 203}, {106, 395}, {396, 322}, {397, 319}, {95, 398}, {58, 399}, {114, 400}, {401, 267}, {305, 402}, {403, 163}, {346, 404}, {405, 66}, {352, 406}, {407, 142}, {377, 408}, {409, 362}, {410, 266}, {400, 411}, {306, 412}, {413, 228}, {414, 292}, {401, 415}, {253, 416}, {417, 204}, {271, 418}, {48, 419}, {334, 420}, {421, 403}, {422, 106}, {423, 386}, {424, 258}, {104, 425}, {426, 105}, {427, 289}, {428, 288}, {429, 210}, {288, 430}, {261, 431}, {108, 432}, {433, 125}, {376, 434}, {435, 35}, {384, 436}, {338, 437}, {438, 32}, {439, 87}, {440, 292}, {243, 441}, {442, 295}, {30, 443}, {444, 55}, {89, 445}, {446, 156}, {447, 437}, {448, 157}, {362, 449}, {18, 450}, {236, 451}, {452, 216}, {453, 117}, {454, 350}, {455, 10}, {456, 274}, {457, 128}, {106, 458}, {459, 313}, {460, 397}, {461, 23}, {28, 462}, {292, 463}, {62, 464}, {79, 465}, {466, 24}, {467, 85}, {282, 468}, {201, 469}, {470, 70}, {189, 471}, {4, 472}, {131, 473}, {474, 259}, {434, 475}, {476, 29}, {477, 129}, {181, 478}, {373, 479}, {300, 480}, {481, 139}, {482, 409}, {483, 99}, {484, 235}, {298, 485}, {437, 486}, {161, 487}, {208, 488}, {212, 489}, {490, 66}, {181, 491}, {492, 106}, {66, 493}, {222, 494}, {412, 495}, {496, 112}, {109, 497}, {292, 498}, {499, 192}, {500, 285}, {501, 466}, {502, 398}, {92, 503}, {38, 504}, {505, 128}, {454, 506}, {168, 507}, {402, 508}, {81, 509}, {163, 510}, {385, 511}, {360, 512}, {321, 513}, {334, 514}, {515, 56}, {516, 47}, {517, 153}, {518, 104}, {325, 519}, {183, 520}, {521, 95}, {522, 82}, {523, 303}, {388, 524}, {163, 525}, {526, 48}, {496, 527}, {528, 155}, {384, 529}, {530, 472}, {117, 531}, {122, 532}, {209, 533}, {144, 534}, {115, 535}, {536, 224}, {17, 537}, {538, 289}, {152, 539}, {540, 96}, {165, 541}, {432, 542}, {246, 543}, {190, 544}, {545, 165}, {546, 364}, {431, 547}, {314, 548}, {549, 234}, {550, 107}, {551, 75}, {458, 552}, {553, 364}, {554, 70}, {555, 290}, {438, 556}, {557, 106}, {558, 464}, {409, 559}, {225, 560}, {301, 561}, {562, 308}, {563, 271}, {564, 424}, {565, 531}, {384, 566}, {283, 567}, {568, 359}, {433, 569}, {562, 570}, {258, 571}, {103, 572}, {521, 573}, {360, 574}, {479, 575}, {443, 576}, {232, 577}, {577, 578}, {579, 371}, {580, 337}, {581, 354}, {582, 335}, {492, 583}, {392, 584}, {406, 585}, {586, 526}, {587, 350}, {588, 12}, {589, 436}, {590, 444}, {591, 543}, {306, 592}, {593, 365}, {73, 594}, {201, 595}, {278, 596}, {597, 477}, {598, 585}, {543, 599}, {475, 600}, {447, 601}, {602, 207}, {298, 603}, {604, 595}, {605, 491}, {303, 606}, {248, 607}, {54, 608}, {609, 378}, {610, 474}, {611, 168}, {542, 612}, {613, 456}, {115, 614}, {383, 615}, {294, 616}, {617, 163}, {383, 618}, {619, 185}, {620, 559}, {621, 495}, {622, 278}, {312, 623}, {105, 624}};
        int seats = 583;
        long l = solution2744.minimumFuelCost5(roads, seats);
        long l1 = solution2744.minimumFuelCost1(roads, seats);
        System.out.println(l);
        System.out.println(l1);
    }

    long res = 0;

    public long minimumFuelCost5(int[][] roads, int seats) {
        int n = roads.length + 1;
        List<Integer>[] g = new ArrayList[n];
        Arrays.setAll(g, e -> new ArrayList<>());
        for (int[] e : roads) {
            int x = e[0], y = e[1];
            g[x].add(y); // 记录每个点的邻居
            g[y].add(x);
        }

        dfs(0, -1, g, seats);
        return ans;
    }



    private int dfs(int x, int fa, List<Integer>[] g, int seats) {
        int size = 1;
        for (int y : g[x]) {
            if (y != fa) { // 递归子节点，不能递归父节点
                size += dfs(y, x, g, seats); // 统计子树大小
            }
        }
        if (x > 0) { // x 不是根节点
            ans += (size - 1) / seats + 1; // ceil(size/seats)
        }
        return size;
    }


    public long minimumFuelCost1(int[][] roads, int seats) {
        int v = roads.length + 1;
        List<Integer>[] dp = new List[v];
        for (int i = 0; i < dp.length; i++) {
            dp[i] = new ArrayList<>();
        }
        for (int[] arr : roads) {
            int x = arr[0];
            int y = arr[1];
            dp[x].add(y);
            dp[y].add(x);

        }
        process1(0, -1, dp, seats);
        return res;
    }
    private long ans;
    private long process1(int cur, int parent, List<Integer>[] roads, int seats) {
        long sum = 1;
        List<Integer> road = roads[cur];
        for (int r : road) {
            if (r != parent) {
                long l = process1(r, cur, roads, seats);
                sum += l;
            }
        }
        if (cur != 0) {
            res = res + (sum + seats - 1) / seats;
        }
        return sum;
    }


}

