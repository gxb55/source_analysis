ConfigurationClassPostProcessor 解析注解 原理是refresh方法中invokeBeanFactoryPostProcessors
    org.springframework.context.annotation.ConfigurationClassBeanDefinitionReader.loadBeanDefinitionsFromRegistrars


***********************************************************************************************************************
0822：spring中AOP的具体实现
AOP面向切面编程，切面是什么意思，是通过代理不但做了本质工作还做了本质工作以外的事情，比如日志打印，事务控制，分布式锁等
在创建对象的时候调用到AbstractAutowireCapableBeanFactory 中doCreateBean ->initializeBean的时候调用后置处理器
生成代理对象，如何判断是否要生成代理对象，就是看他是否有通知

org.springframework.aop.framework.CglibAopProxy.DynamicAdvisedInterceptor开始

org.springframework.aop.framework.DefaultAdvisorChainFactory.getInterceptorsAndDynamicInterceptionAdvice
其实在这之前在生成代理的时候advice就和目标方法匹配过，并创建代理，增加advice；获取advice和匹配关系

org.springframework.aop.framework.CglibAopProxy.CglibMethodInvocation
每次process都会调用父类的process方法 super.process();

org.springframework.aop.interceptor.ExposeInvocationInterceptor
永远都是第一个，他会创建本地线程缓存，将advice的链条放入到本地缓存中去，然后调用下一个责任链


现有代码的通知
before
around
after
afterReturn

1.around begin
2.before
3.afterReturning
4.after
5.around end

执行过程
流程
CglibAopProxy
CglibMethodInvocation-> chain责任链
0 exposeInvocationInterceptor 责任链放入到本地线程
1 org.springframework.aop.aspectj.AspectJAroundAdvice.invoke ->joinPoint.proceed()
2 org.springframework.aop.framework.CglibAopProxy.CglibMethodInvocation.proceed   第一次
3 org.springframework.aop.framework.adapter.MethodBeforeAdviceInterceptor.invoke
4 org.springframework.aop.framework.CglibAopProxy.CglibMethodInvocation.proceed   第二次
5.org.springframework.aop.aspectj.AspectJAfterAdvice.invoke
6 org.springframework.aop.framework.CglibAopProxy.CglibMethodInvocation.proceed   第二次
7.org.springframework.aop.framework.adapter.AfterReturningAdviceInterceptor.invoke
以上的说法有些问题
around 前半部分，before，都会显示的调用他们自己的方法，然后调用父类继续调用下一个拦截去
around前半部分-》before-》

after，afterReturn，afterThrowing，都是在目标方法执行完之后执行的，当所有的通知都执行完之后
会执行目标函数，执行完目标函数之后会回调，这里是一个递归的过程

after-》afterReturn->afterThrowing->目标函数，
目标函数执行之后-》afterReturn或者afterThrowing-》after方法->around后半段-》

org.springframework.aop.framework.CglibAopProxy.DynamicAdvisedInterceptor.intercept
在这个方法中即把责任链的拦截函数执行，也把自己的方法执行了，最后返回
